{
  "version": 3,
  "sources": ["../../gsap/utils/strings.js", "../../gsap/ScrambleTextPlugin.js"],
  "sourcesContent": ["/*!\n * strings: 3.13.0\n * https://gsap.com\n *\n * Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _trimExp = /(?:^\\s+|\\s+$)/g;\nexport var emojiExp = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF](?:[\\u200D\\uFE0F][\\uD800-\\uDBFF][\\uDC00-\\uDFFF]){2,}|\\uD83D\\uDC69(?:\\u200D(?:(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67|(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2642\\u2640]\\uFE0F|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDD27\\uDCBC\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC6F\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3C-\\uDD3E\\uDDD6-\\uDDDF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|(?:\\u26F9|\\uD83C[\\uDFCC\\uDFCB]|\\uD83D\\uDD75)(?:\\uFE0F\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642])\\uFE0F|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC69\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC68(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708]))\\uFE0F|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83D\\uDC69\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69]))|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]))|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDD1-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\u200D(?:(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC69\\uDC6E\\uDC70-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3D\\uDD3E\\uDDD1-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])?|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDEEB\\uDEEC\\uDEF4-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])\\uFE0F)/;\nexport function getText(e) {\n  var type = e.nodeType,\n      result = \"\";\n\n  if (type === 1 || type === 9 || type === 11) {\n    if (typeof e.textContent === \"string\") {\n      return e.textContent;\n    } else {\n      for (e = e.firstChild; e; e = e.nextSibling) {\n        result += getText(e);\n      }\n    }\n  } else if (type === 3 || type === 4) {\n    return e.nodeValue;\n  }\n\n  return result;\n}\nexport function splitInnerHTML(element, delimiter, trim, preserveSpaces, unescapedCharCodes) {\n  var node = element.firstChild,\n      result = [],\n      s;\n\n  while (node) {\n    if (node.nodeType === 3) {\n      s = (node.nodeValue + \"\").replace(/^\\n+/g, \"\");\n\n      if (!preserveSpaces) {\n        s = s.replace(/\\s+/g, \" \");\n      }\n\n      result.push.apply(result, emojiSafeSplit(s, delimiter, trim, preserveSpaces, unescapedCharCodes));\n    } else if ((node.nodeName + \"\").toLowerCase() === \"br\") {\n      result[result.length - 1] += \"<br>\";\n    } else {\n      result.push(node.outerHTML);\n    }\n\n    node = node.nextSibling;\n  }\n\n  if (!unescapedCharCodes) {\n    s = result.length;\n\n    while (s--) {\n      result[s] === \"&\" && result.splice(s, 1, \"&amp;\");\n    }\n  }\n\n  return result;\n}\n/*\n//smaller kb version that only handles the simpler emoji's, which is often perfectly adequate.\n\nlet _emoji = \"[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2694-\\u2697]|\\uD83E[\\uDD10-\\uDD5D]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\",\n\t_emojiExp = new RegExp(_emoji),\n\t_emojiAndCharsExp = new RegExp(_emoji + \"|.\", \"g\"),\n\t_emojiSafeSplit = (text, delimiter, trim) => {\n\t\tif (trim) {\n\t\t\ttext = text.replace(_trimExp, \"\");\n\t\t}\n\t\treturn ((delimiter === \"\" || !delimiter) && _emojiExp.test(text)) ? text.match(_emojiAndCharsExp) : text.split(delimiter || \"\");\n\t};\n */\n\nexport function emojiSafeSplit(text, delimiter, trim, preserveSpaces, unescapedCharCodes) {\n  text += \"\"; // make sure it's cast as a string. Someone may pass in a number.\n\n  trim && (text = text.trim ? text.trim() : text.replace(_trimExp, \"\")); // IE9 and earlier compatibility\n\n  if (delimiter && delimiter !== \"\") {\n    return text.replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\").split(delimiter);\n  }\n\n  var result = [],\n      l = text.length,\n      i = 0,\n      j,\n      character;\n\n  for (; i < l; i++) {\n    character = text.charAt(i);\n\n    if (character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF || text.charCodeAt(i + 1) >= 0xFE00 && text.charCodeAt(i + 1) <= 0xFE0F) {\n      //special emoji characters use 2 or 4 unicode characters that we must keep together.\n      j = ((text.substr(i, 12).split(emojiExp) || [])[1] || \"\").length || 2;\n      character = text.substr(i, j);\n      result.emoji = 1;\n      i += j - 1;\n    }\n\n    result.push(unescapedCharCodes ? character : character === \">\" ? \"&gt;\" : character === \"<\" ? \"&lt;\" : preserveSpaces && character === \" \" && (text.charAt(i - 1) === \" \" || text.charAt(i + 1) === \" \") ? \"&nbsp;\" : character);\n  }\n\n  return result;\n}", "/*!\n * ScrambleTextPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { emojiSafeSplit, getText } from \"./utils/strings.js\";\n\nvar CharSet = /*#__PURE__*/function () {\n  function CharSet(chars) {\n    this.chars = emojiSafeSplit(chars);\n    this.sets = [];\n    this.length = 50;\n\n    for (var i = 0; i < 20; i++) {\n      this.sets[i] = _scrambleText(80, this.chars); //we create 20 strings that are 80 characters long, randomly chosen and pack them into an array. We then randomly choose the scrambled text from this array in order to greatly improve efficiency compared to creating new randomized text from scratch each and every time it's needed. This is a simple lookup whereas the other technique requires looping through as many times as there are characters needed, and calling Math.random() each time through the loop, building the string, etc.\n    }\n  }\n\n  var _proto = CharSet.prototype;\n\n  _proto.grow = function grow(newLength) {\n    //if we encounter a tween that has more than 80 characters, we'll need to add to the character sets accordingly. Once it's cached, it'll only need to grow again if we exceed that new length. Again, this is an efficiency tactic.\n    for (var i = 0; i < 20; i++) {\n      this.sets[i] += _scrambleText(newLength - this.length, this.chars);\n    }\n\n    this.length = newLength;\n  };\n\n  return CharSet;\n}();\n\nvar gsap,\n    _coreInitted,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _bonusValidated = 1,\n    //<name>ScrambleTextPlugin</name>\n_spacesExp = /\\s+/g,\n    _scrambleText = function _scrambleText(length, chars) {\n  var l = chars.length,\n      s = \"\";\n\n  while (--length > -1) {\n    s += chars[~~(Math.random() * l)];\n  }\n\n  return s;\n},\n    _upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    _lower = _upper.toLowerCase(),\n    _charsLookup = {\n  upperCase: new CharSet(_upper),\n  lowerCase: new CharSet(_lower),\n  upperAndLowerCase: new CharSet(_upper + _lower)\n},\n    _initCore = function _initCore() {\n  _coreInitted = gsap = _getGSAP();\n};\n\nexport var ScrambleTextPlugin = {\n  version: \"3.13.0\",\n  name: \"scrambleText\",\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n\n    _initCore();\n  },\n  init: function init(target, value, tween, index, targets) {\n    _coreInitted || _initCore();\n    this.prop = \"innerHTML\" in target ? \"innerHTML\" : \"textContent\" in target ? \"textContent\" : 0; // SVG text in IE doesn't have innerHTML, but it does have textContent.\n\n    if (!this.prop) {\n      return;\n    }\n\n    this.target = target;\n\n    if (typeof value !== \"object\") {\n      value = {\n        text: value\n      };\n    }\n\n    var text = value.text || value.value || \"\",\n        trim = value.trim !== false,\n        data = this,\n        delim,\n        maxLength,\n        charset,\n        splitByChars;\n    data.delimiter = delim = value.delimiter || \"\";\n    data.original = emojiSafeSplit(getText(target).replace(_spacesExp, \" \").split(\"&nbsp;\").join(\"\"), delim, trim);\n\n    if (text === \"{original}\" || text === true || text == null) {\n      text = data.original.join(delim);\n    }\n\n    data.text = emojiSafeSplit((text || \"\").replace(_spacesExp, \" \"), delim, trim);\n    data.hasClass = !!(value.newClass || value.oldClass);\n    data.newClass = value.newClass;\n    data.oldClass = value.oldClass;\n    splitByChars = delim === \"\";\n    data.textHasEmoji = splitByChars && !!data.text.emoji;\n    data.charsHaveEmoji = !!value.chars && !!emojiSafeSplit(value.chars).emoji;\n    data.length = splitByChars ? data.original.length : data.original.join(delim).length;\n    data.lengthDif = (splitByChars ? data.text.length : data.text.join(delim).length) - data.length;\n    data.fillChar = value.fillChar || value.chars && ~value.chars.indexOf(\" \") ? \"&nbsp;\" : \"\";\n    data.charSet = charset = _charsLookup[value.chars || \"upperCase\"] || new CharSet(value.chars);\n    data.speed = 0.05 / (value.speed || 1);\n    data.prevScrambleTime = 0;\n    data.setIndex = Math.random() * 20 | 0;\n    maxLength = data.length + Math.max(data.lengthDif, 0);\n\n    if (maxLength > charset.length) {\n      charset.grow(maxLength);\n    }\n\n    data.chars = charset.sets[data.setIndex];\n    data.revealDelay = value.revealDelay || 0;\n    data.tweenLength = value.tweenLength !== false;\n    data.tween = tween;\n    data.rightToLeft = !!value.rightToLeft;\n\n    data._props.push(\"scrambleText\", \"text\");\n\n    return _bonusValidated;\n  },\n  render: function render(ratio, data) {\n    var target = data.target,\n        prop = data.prop,\n        text = data.text,\n        delimiter = data.delimiter,\n        tween = data.tween,\n        prevScrambleTime = data.prevScrambleTime,\n        revealDelay = data.revealDelay,\n        setIndex = data.setIndex,\n        chars = data.chars,\n        charSet = data.charSet,\n        length = data.length,\n        textHasEmoji = data.textHasEmoji,\n        charsHaveEmoji = data.charsHaveEmoji,\n        lengthDif = data.lengthDif,\n        tweenLength = data.tweenLength,\n        oldClass = data.oldClass,\n        newClass = data.newClass,\n        rightToLeft = data.rightToLeft,\n        fillChar = data.fillChar,\n        speed = data.speed,\n        original = data.original,\n        hasClass = data.hasClass,\n        l = text.length,\n        time = tween._time,\n        timeDif = time - prevScrambleTime,\n        i,\n        i2,\n        startText,\n        endText,\n        applyNew,\n        applyOld,\n        str,\n        startClass,\n        endClass,\n        position,\n        r;\n\n    if (revealDelay) {\n      if (tween._from) {\n        time = tween._dur - time; //invert the time for from() tweens\n      }\n\n      ratio = time === 0 ? 0 : time < revealDelay ? 0.000001 : time === tween._dur ? 1 : tween._ease((time - revealDelay) / (tween._dur - revealDelay));\n    }\n\n    if (ratio < 0) {\n      ratio = 0;\n    } else if (ratio > 1) {\n      ratio = 1;\n    }\n\n    if (rightToLeft) {\n      ratio = 1 - ratio;\n    }\n\n    i = ~~(ratio * l + 0.5);\n\n    if (ratio) {\n      if (timeDif > speed || timeDif < -speed) {\n        data.setIndex = setIndex = (setIndex + (Math.random() * 19 | 0)) % 20;\n        data.chars = charSet.sets[setIndex];\n        data.prevScrambleTime += timeDif;\n      }\n\n      endText = chars;\n    } else {\n      endText = original.join(delimiter);\n    }\n\n    r = tween._from ? ratio : 1 - ratio;\n    position = length + (tweenLength ? tween._from ? r * r * r : 1 - r * r * r : 1) * lengthDif;\n\n    if (rightToLeft) {\n      if (ratio === 1 && (tween._from || tween.data === \"isFromStart\")) {\n        //special case for from() tweens\n        startText = \"\";\n        endText = original.join(delimiter);\n      } else {\n        str = text.slice(i).join(delimiter);\n\n        if (charsHaveEmoji) {\n          startText = emojiSafeSplit(endText).slice(0, position - (textHasEmoji ? emojiSafeSplit(str) : str).length + 0.5 | 0).join(\"\");\n        } else {\n          startText = endText.substr(0, position - (textHasEmoji ? emojiSafeSplit(str) : str).length + 0.5 | 0);\n        }\n\n        endText = str;\n      }\n    } else {\n      startText = text.slice(0, i).join(delimiter);\n      i2 = (textHasEmoji ? emojiSafeSplit(startText) : startText).length;\n\n      if (charsHaveEmoji) {\n        endText = emojiSafeSplit(endText).slice(i2, position + 0.5 | 0).join(\"\");\n      } else {\n        endText = endText.substr(i2, position - i2 + 0.5 | 0);\n      }\n    }\n\n    if (hasClass) {\n      startClass = rightToLeft ? oldClass : newClass;\n      endClass = rightToLeft ? newClass : oldClass;\n      applyNew = startClass && i !== 0;\n      applyOld = endClass && i !== l;\n      str = (applyNew ? \"<span class='\" + startClass + \"'>\" : \"\") + startText + (applyNew ? \"</span>\" : \"\") + (applyOld ? \"<span class='\" + endClass + \"'>\" : \"\") + delimiter + endText + (applyOld ? \"</span>\" : \"\");\n    } else {\n      str = startText + delimiter + endText;\n    }\n\n    target[prop] = fillChar === \"&nbsp;\" && ~str.indexOf(\"  \") ? str.split(\"  \").join(\"&nbsp;&nbsp;\") : str;\n  }\n};\nScrambleTextPlugin.emojiSafeSplit = emojiSafeSplit;\nScrambleTextPlugin.getText = getText;\n_getGSAP() && gsap.registerPlugin(ScrambleTextPlugin);\nexport { ScrambleTextPlugin as default };"],
  "mappings": ";AAUA,IAAI,WAAW;AACR,IAAI,WAAW;AACf,SAAS,QAAQ,GAAG;AACzB,MAAI,OAAO,EAAE,UACT,SAAS;AAEb,MAAI,SAAS,KAAK,SAAS,KAAK,SAAS,IAAI;AAC3C,QAAI,OAAO,EAAE,gBAAgB,UAAU;AACrC,aAAO,EAAE;AAAA,IACX,OAAO;AACL,WAAK,IAAI,EAAE,YAAY,GAAG,IAAI,EAAE,aAAa;AAC3C,kBAAU,QAAQ,CAAC;AAAA,MACrB;AAAA,IACF;AAAA,EACF,WAAW,SAAS,KAAK,SAAS,GAAG;AACnC,WAAO,EAAE;AAAA,EACX;AAEA,SAAO;AACT;AAgDO,SAAS,eAAe,MAAM,WAAW,MAAM,gBAAgB,oBAAoB;AACxF,UAAQ;AAER,WAAS,OAAO,KAAK,OAAO,KAAK,KAAK,IAAI,KAAK,QAAQ,UAAU,EAAE;AAEnE,MAAI,aAAa,cAAc,IAAI;AACjC,WAAO,KAAK,QAAQ,MAAM,MAAM,EAAE,QAAQ,MAAM,MAAM,EAAE,MAAM,SAAS;AAAA,EACzE;AAEA,MAAI,SAAS,CAAC,GACV,IAAI,KAAK,QACT,IAAI,GACJ,GACA;AAEJ,SAAO,IAAI,GAAG,KAAK;AACjB,gBAAY,KAAK,OAAO,CAAC;AAEzB,QAAI,UAAU,WAAW,CAAC,KAAK,SAAU,UAAU,WAAW,CAAC,KAAK,SAAU,KAAK,WAAW,IAAI,CAAC,KAAK,SAAU,KAAK,WAAW,IAAI,CAAC,KAAK,OAAQ;AAElJ,YAAM,KAAK,OAAO,GAAG,EAAE,EAAE,MAAM,QAAQ,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,UAAU;AACpE,kBAAY,KAAK,OAAO,GAAG,CAAC;AAC5B,aAAO,QAAQ;AACf,WAAK,IAAI;AAAA,IACX;AAEA,WAAO,KAAK,qBAAqB,YAAY,cAAc,MAAM,SAAS,cAAc,MAAM,SAAS,kBAAkB,cAAc,QAAQ,KAAK,OAAO,IAAI,CAAC,MAAM,OAAO,KAAK,OAAO,IAAI,CAAC,MAAM,OAAO,WAAW,SAAS;AAAA,EACjO;AAEA,SAAO;AACT;;;AC/FA,IAAI,WAAuB,WAAY;AACrC,WAASA,SAAQ,OAAO;AACtB,SAAK,QAAQ,eAAe,KAAK;AACjC,SAAK,OAAO,CAAC;AACb,SAAK,SAAS;AAEd,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,WAAK,KAAK,CAAC,IAAI,cAAc,IAAI,KAAK,KAAK;AAAA,IAC7C;AAAA,EACF;AAEA,MAAI,SAASA,SAAQ;AAErB,SAAO,OAAO,SAAS,KAAK,WAAW;AAErC,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,WAAK,KAAK,CAAC,KAAK,cAAc,YAAY,KAAK,QAAQ,KAAK,KAAK;AAAA,IACnE;AAEA,SAAK,SAAS;AAAA,EAChB;AAEA,SAAOA;AACT,GAAE;AAEF,IAAI;AAAJ,IACI;AADJ,IAEI,WAAW,SAASC,YAAW;AACjC,SAAO,QAAQ,OAAO,WAAW,gBAAgB,OAAO,OAAO,SAAS,KAAK,kBAAkB;AACjG;AAJA,IAKI,kBAAkB;AALtB,IAOA,aAAa;AAPb,IAQI,gBAAgB,SAASC,eAAc,QAAQ,OAAO;AACxD,MAAI,IAAI,MAAM,QACV,IAAI;AAER,SAAO,EAAE,SAAS,IAAI;AACpB,SAAK,MAAM,CAAC,EAAE,KAAK,OAAO,IAAI,EAAE;AAAA,EAClC;AAEA,SAAO;AACT;AAjBA,IAkBI,SAAS;AAlBb,IAmBI,SAAS,OAAO,YAAY;AAnBhC,IAoBI,eAAe;AAAA,EACjB,WAAW,IAAI,QAAQ,MAAM;AAAA,EAC7B,WAAW,IAAI,QAAQ,MAAM;AAAA,EAC7B,mBAAmB,IAAI,QAAQ,SAAS,MAAM;AAChD;AAxBA,IAyBI,YAAY,SAASC,aAAY;AACnC,iBAAe,OAAO,SAAS;AACjC;AAEO,IAAI,qBAAqB;AAAA,EAC9B,SAAS;AAAA,EACT,MAAM;AAAA,EACN,UAAU,SAAS,SAAS,MAAM,QAAQ,WAAW;AACnD,WAAO;AAEP,cAAU;AAAA,EACZ;AAAA,EACA,MAAM,SAAS,KAAK,QAAQ,OAAO,OAAO,OAAO,SAAS;AACxD,oBAAgB,UAAU;AAC1B,SAAK,OAAO,eAAe,SAAS,cAAc,iBAAiB,SAAS,gBAAgB;AAE5F,QAAI,CAAC,KAAK,MAAM;AACd;AAAA,IACF;AAEA,SAAK,SAAS;AAEd,QAAI,OAAO,UAAU,UAAU;AAC7B,cAAQ;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAEA,QAAI,OAAO,MAAM,QAAQ,MAAM,SAAS,IACpC,OAAO,MAAM,SAAS,OACtB,OAAO,MACP,OACA,WACA,SACA;AACJ,SAAK,YAAY,QAAQ,MAAM,aAAa;AAC5C,SAAK,WAAW,eAAe,QAAQ,MAAM,EAAE,QAAQ,YAAY,GAAG,EAAE,MAAM,QAAQ,EAAE,KAAK,EAAE,GAAG,OAAO,IAAI;AAE7G,QAAI,SAAS,gBAAgB,SAAS,QAAQ,QAAQ,MAAM;AAC1D,aAAO,KAAK,SAAS,KAAK,KAAK;AAAA,IACjC;AAEA,SAAK,OAAO,gBAAgB,QAAQ,IAAI,QAAQ,YAAY,GAAG,GAAG,OAAO,IAAI;AAC7E,SAAK,WAAW,CAAC,EAAE,MAAM,YAAY,MAAM;AAC3C,SAAK,WAAW,MAAM;AACtB,SAAK,WAAW,MAAM;AACtB,mBAAe,UAAU;AACzB,SAAK,eAAe,gBAAgB,CAAC,CAAC,KAAK,KAAK;AAChD,SAAK,iBAAiB,CAAC,CAAC,MAAM,SAAS,CAAC,CAAC,eAAe,MAAM,KAAK,EAAE;AACrE,SAAK,SAAS,eAAe,KAAK,SAAS,SAAS,KAAK,SAAS,KAAK,KAAK,EAAE;AAC9E,SAAK,aAAa,eAAe,KAAK,KAAK,SAAS,KAAK,KAAK,KAAK,KAAK,EAAE,UAAU,KAAK;AACzF,SAAK,WAAW,MAAM,YAAY,MAAM,SAAS,CAAC,MAAM,MAAM,QAAQ,GAAG,IAAI,WAAW;AACxF,SAAK,UAAU,UAAU,aAAa,MAAM,SAAS,WAAW,KAAK,IAAI,QAAQ,MAAM,KAAK;AAC5F,SAAK,QAAQ,QAAQ,MAAM,SAAS;AACpC,SAAK,mBAAmB;AACxB,SAAK,WAAW,KAAK,OAAO,IAAI,KAAK;AACrC,gBAAY,KAAK,SAAS,KAAK,IAAI,KAAK,WAAW,CAAC;AAEpD,QAAI,YAAY,QAAQ,QAAQ;AAC9B,cAAQ,KAAK,SAAS;AAAA,IACxB;AAEA,SAAK,QAAQ,QAAQ,KAAK,KAAK,QAAQ;AACvC,SAAK,cAAc,MAAM,eAAe;AACxC,SAAK,cAAc,MAAM,gBAAgB;AACzC,SAAK,QAAQ;AACb,SAAK,cAAc,CAAC,CAAC,MAAM;AAE3B,SAAK,OAAO,KAAK,gBAAgB,MAAM;AAEvC,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,SAAS,OAAO,OAAO,MAAM;AACnC,QAAI,SAAS,KAAK,QACd,OAAO,KAAK,MACZ,OAAO,KAAK,MACZ,YAAY,KAAK,WACjB,QAAQ,KAAK,OACb,mBAAmB,KAAK,kBACxB,cAAc,KAAK,aACnB,WAAW,KAAK,UAChB,QAAQ,KAAK,OACb,UAAU,KAAK,SACf,SAAS,KAAK,QACd,eAAe,KAAK,cACpB,iBAAiB,KAAK,gBACtB,YAAY,KAAK,WACjB,cAAc,KAAK,aACnB,WAAW,KAAK,UAChB,WAAW,KAAK,UAChB,cAAc,KAAK,aACnB,WAAW,KAAK,UAChB,QAAQ,KAAK,OACb,WAAW,KAAK,UAChB,WAAW,KAAK,UAChB,IAAI,KAAK,QACT,OAAO,MAAM,OACb,UAAU,OAAO,kBACjB,GACA,IACA,WACA,SACA,UACA,UACA,KACA,YACA,UACA,UACA;AAEJ,QAAI,aAAa;AACf,UAAI,MAAM,OAAO;AACf,eAAO,MAAM,OAAO;AAAA,MACtB;AAEA,cAAQ,SAAS,IAAI,IAAI,OAAO,cAAc,OAAW,SAAS,MAAM,OAAO,IAAI,MAAM,OAAO,OAAO,gBAAgB,MAAM,OAAO,YAAY;AAAA,IAClJ;AAEA,QAAI,QAAQ,GAAG;AACb,cAAQ;AAAA,IACV,WAAW,QAAQ,GAAG;AACpB,cAAQ;AAAA,IACV;AAEA,QAAI,aAAa;AACf,cAAQ,IAAI;AAAA,IACd;AAEA,QAAI,CAAC,EAAE,QAAQ,IAAI;AAEnB,QAAI,OAAO;AACT,UAAI,UAAU,SAAS,UAAU,CAAC,OAAO;AACvC,aAAK,WAAW,YAAY,YAAY,KAAK,OAAO,IAAI,KAAK,MAAM;AACnE,aAAK,QAAQ,QAAQ,KAAK,QAAQ;AAClC,aAAK,oBAAoB;AAAA,MAC3B;AAEA,gBAAU;AAAA,IACZ,OAAO;AACL,gBAAU,SAAS,KAAK,SAAS;AAAA,IACnC;AAEA,QAAI,MAAM,QAAQ,QAAQ,IAAI;AAC9B,eAAW,UAAU,cAAc,MAAM,QAAQ,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK;AAElF,QAAI,aAAa;AACf,UAAI,UAAU,MAAM,MAAM,SAAS,MAAM,SAAS,gBAAgB;AAEhE,oBAAY;AACZ,kBAAU,SAAS,KAAK,SAAS;AAAA,MACnC,OAAO;AACL,cAAM,KAAK,MAAM,CAAC,EAAE,KAAK,SAAS;AAElC,YAAI,gBAAgB;AAClB,sBAAY,eAAe,OAAO,EAAE,MAAM,GAAG,YAAY,eAAe,eAAe,GAAG,IAAI,KAAK,SAAS,MAAM,CAAC,EAAE,KAAK,EAAE;AAAA,QAC9H,OAAO;AACL,sBAAY,QAAQ,OAAO,GAAG,YAAY,eAAe,eAAe,GAAG,IAAI,KAAK,SAAS,MAAM,CAAC;AAAA,QACtG;AAEA,kBAAU;AAAA,MACZ;AAAA,IACF,OAAO;AACL,kBAAY,KAAK,MAAM,GAAG,CAAC,EAAE,KAAK,SAAS;AAC3C,YAAM,eAAe,eAAe,SAAS,IAAI,WAAW;AAE5D,UAAI,gBAAgB;AAClB,kBAAU,eAAe,OAAO,EAAE,MAAM,IAAI,WAAW,MAAM,CAAC,EAAE,KAAK,EAAE;AAAA,MACzE,OAAO;AACL,kBAAU,QAAQ,OAAO,IAAI,WAAW,KAAK,MAAM,CAAC;AAAA,MACtD;AAAA,IACF;AAEA,QAAI,UAAU;AACZ,mBAAa,cAAc,WAAW;AACtC,iBAAW,cAAc,WAAW;AACpC,iBAAW,cAAc,MAAM;AAC/B,iBAAW,YAAY,MAAM;AAC7B,aAAO,WAAW,kBAAkB,aAAa,OAAO,MAAM,aAAa,WAAW,YAAY,OAAO,WAAW,kBAAkB,WAAW,OAAO,MAAM,YAAY,WAAW,WAAW,YAAY;AAAA,IAC9M,OAAO;AACL,YAAM,YAAY,YAAY;AAAA,IAChC;AAEA,WAAO,IAAI,IAAI,aAAa,YAAY,CAAC,IAAI,QAAQ,IAAI,IAAI,IAAI,MAAM,IAAI,EAAE,KAAK,cAAc,IAAI;AAAA,EACtG;AACF;AACA,mBAAmB,iBAAiB;AACpC,mBAAmB,UAAU;AAC7B,SAAS,KAAK,KAAK,eAAe,kBAAkB;",
  "names": ["CharSet", "_getGSAP", "_scrambleText", "_initCore"]
}
